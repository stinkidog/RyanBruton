{
      "posts": [
            {
                  "id": 0,
                  "title": "An Introduction - Why I built a personal site using React.Js",
                  "category": "Technology",
                  "image": "BuildingSite.jpg",
                  "html": "<h2><u>A bit of background</u></h2>\n\n<p>&nbsp;</p>\n\n<p>I started programming at about 18, when I was simply riding my bmx roughly 5 days a week and floating through college. It was becoming clear that bmx wasn&#39;t going to pay the bills, and I needed to find some sort of career. I was on a &quot;gap year&quot; following college, and after riding during the days, I&#39;d settle in to play games like every other teenage boy. I&#39;m somewhat naturally inquisitive, and so after a particularly boring day, I found myself on CodeAcademy in an attempt to understand what was going on under the hood of the games I was playing. I hadn&#39;t taken any course or subject relevant to computing, but I decided to take a last minute stab at applying to computer science courses at university. Foruntately my grades and results have always been solid, and following a phone call reassuring the program lead I wouldn&#39;t require the foundational course, I was accepted into BSc Computer Science at Oxford Brookes</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<h2><u>Life as a .NET developer</u></h2>\n\n<p>&nbsp;</p>\n\n<p>University actually didn&#39;t particularly have a language of choice, or make any attempt to push us towards industry standards. The languages I remember&nbsp; using across various mofules were Python, Java, Haskell, C++,&nbsp; and C#. And to be honest at the time, I didn&#39;t really care. I neither hated programming, nor loved it. It definitely sparked my curiosity, and would provide a good hit of dopamine when solving a problem, but I wouldn&#39;t call it a passion.</p>\n\n<p>&nbsp;</p>\n\n<p>What ulimately led to my fate as a .NET developer was my placement year. If anyone was to read this who is studying at university, <em><strong>DO A PLACEMENT YEAR</strong>.</em> TLDR - the value you get from a year in industry is worth the degree in itself. I was fortunate to land myself in a particularly &#39;sexy&#39; role at Red Bull Racing (RBR). I was thrown into an environment amongst engineers who are the cutting edge of technology. I won&#39;t pretend I didn&#39;t struggle, I did, especially with the hours. But you learn when you&#39;re out of your comfort zone, and that I certainly was. The department I was in at RBR used .NET, so that&#39;s what I learned, and that&#39;s what I continue to use to this day.</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<h2><u>So why build a personal site in React.js?</u></h2>\n\n<p>&nbsp;</p>\n\n<p>The motivation to develop a personal site, from scratch, ticked a lot of boxes. I&#39;ve always kinda wanted my own site. Something about having &quot;.com&quot; after your name feels pretty cool. But at the same time I didn&#39;t really know what my website should be about. I&#39;d already tried once at creating a site for my musical hobbies, but I pretty much deployed it, didn&#39;t touch it for a year, then got rid of it all when the annual bill came in. Recently though I&#39;ve started to believe there&#39;s more importance than before on a personal brand, and now realise, I can do and post whatever I want!</p>\n\n<p>&nbsp;</p>\n\n<blockquote>\n<p>&quot;nothing beats owning your own space online, a place that you control, a place that no one can take away from you, a world headquarters where people can always find you&quot; <span>Austin Kleon - Show your work</span></p>\n</blockquote>\n\n<p>&nbsp;</p>\n\n<p>This belief all came at the same time where I was going to be required to do some front end work at my job. We&#39;d be hiring a senior into our team to own and guide us in the process, and of course we went with the ever popular cool kid on the block, React.Js. Well, Next.Js. We&#39;re actually using typescript to leverage all the benefits of type safety, but my personal needs don&#39;t have those requirements. So everything sort of fell into place. I needed to develop front end skills for my career, coupled with a growing belief that personal branding will become more and more important. Why not give it a go?</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<h2><u>What have I already learnt?&nbsp;</u></h2>\n\n<p>&nbsp;</p>\n\n<p>When this is deployed, there will literally only be a homepage, and this blog page. 2 pages. And I&#39;ve already started to create my own problems.&nbsp;<em><strong>This is a good thing!&nbsp;&nbsp;</strong></em>This is how we learn. One of my sources of inspiration is David Goggins, and he&#39;s talked multiple times about the theorist vs the practitioner. I agree with his stance that both have value, but I&#39;d always take advice from the practitioner. All the theory in the world can never prepare you for the actual act of the practice. I&#39;d actually completed the full meta (who created the react framework) course prior through work, and whilst it genuinely was very good, the results followed a similar pattern I&#39;ve always encountered in development.</p>\n\n<p>&nbsp;</p>\n\n<ul>\n\t<li>Read / learn about a new language, framework, or any new technical skill</li>\n\t<li>Try it, and sort of get something that works, but it&#39;s not quite right</li>\n\t<li>Revisit the theory, and refine your implementation</li>\n\t<li>Endlessly repeat for the rest of your programming life</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p>Here&#39;s some insights into problems I&#39;m encountering, unknowns, and general thoughts from someones first stab at React.js. Some of these could be somewhat unaviodable for yourself, but at least you&#39;ll be aware of what challenges you&#39;ll face. Like I said, this is theory, but you&#39;ll need to practice.</p>\n\n<p>&nbsp;</p>\n\n<p><br />\n\n<strong>Components</strong></p>\n\n<p>&nbsp;</p>\n\n<p>Yeah I&#39;ve just done this completely wrong. I&#39;ve not given enough thought to what are common components, and how they can be abstracted out into their own logical units. For example the blog post cards I&#39;m using on the homepage and the top of this post. The buttons, the socials bar, the navbar. Most of it really. It&#39;s starting to get messy and I&#39;m starting to violate DRY (don&#39;t repeat yourself) quite a lot just to get something working. This is really crying out for attention as I have ideas going forward, but I know I&#39;d have to further repeat myself and hack bits together. So now I&#39;ve got a better idea of the structure and flow of the site, I plan on going back and properly considering what should be a component, and how to break down what I already have, so I can accerlate faster with future development.</p>\n\n<p><br />\n\n&nbsp;</p>\n\n<h3><strong>CSS</strong></h3>\n\n<p>&nbsp;</p>\n\n<p>This one has been a bit of a journey. I didn&#39;t want anything complex design wise for multiple reasons. I wanted to actually be able to achieve something and get it out. Anything overly complex, no matter how cool it looked, would frustrate me and cause me to give up. Iterating in small steps and stacking wins is a much better approach.&nbsp;I also didn&#39;t really understand css very well, only very primitively. This was an issue because there&#39;s a lot of amazing libraries and frameworks that do a lot of abstraction for you (Bootstrap, Tailwind, Material UI etc).</p>\n\n<p>&nbsp;</p>\n\n<p>When I started, I didn&#39;t even understand what these were offering me. Trying to use them felt like being handcuffed and having to buy into their system. What I really wanted to do was understand what&#39;s going on under the hood (like all those years ago with video games...). I committed to using raw css behind every file. An approach called BEM (block - element - modifier), is currently what I&#39;m using, which I&#39;ve had mixed experiences with. Sometimes it&#39;s pretty hard to read as you drill into the layers and class names become long, but at least it offers some sort of structure.&nbsp;I went hard into learning about the flex layout which would be my rock for everything. I figured I could always refine later and flex would cover all the basic needs. Flex is specifically great for getting responsiveness somewhat for free, with little media queries for fine tuning paddings / text sizes, etc.</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p><img alt=\"Centering a Div (creds to twitter.com/vincentdnl for monitor image) :  r/ProgrammerHumor\" src=\"https://preview.redd.it/2p8v1rh44o471.jpg?auto=webp&amp;s=6b4290a2468ccfc1dbb033274c854112e78a38b0\" /></p>\n\n<h3>&nbsp;</h3>\n\n<p>&nbsp;</p>\n\n<h3><strong>Content - do I need a CMS?</strong></h3>\n\n<p>&nbsp;</p>\n\n<p>I knew I wanted a blog. And when you go away and research this, you&#39;ll probably get flooded with different cms (content management system) suggestions. After learning about headless CMS (a system detached from any front end, so a way to purely manage just content), I did a fair bit of investigating if any would be suitable. But ultimately, for now, I have settled on it being overkill. This is currently being hosted on netlify for free, and all I&#39;m paying for is the domain name. Hosting a cms and managing it seemed like an unnecessary cost in time, effort, and money. Especially at the start. My initial goal was to get familiar with react and front end development. The cms approach may have helped with interacting with api&#39;s, but this was an area I&#39;ve had general experience in over time and didn&#39;t feel would be overly beneficial. So I&#39;m effectively writing this on an online html editor which I&#39;ll just stringify and inject into the page. Not amazing, pretty inefficient, no management, and probably has security issues. But again, scope is important. This is my space, and I can accept those risks.</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<h2><u>Summary</u></h2>\n\n<p>&nbsp;</p>\n\n<p>I found mysef in a position where I was required to learn front end. An opportunity that married perfectly with the want to build a personal site. But you can have any reason to want to build your own. React is a great framework and I&#39;ve actually enjoyed using it. Building this has given me some sort of second wind with enjoyment for development. Writing this in my spare time is a testament to that, as I already have too many hobbies that I struggle to give attention to. My biggest suggestion would be don&#39;t set the bar too high. Don&#39;t create barriers for yourself and keep it simple. You&#39;ll feel much better just getting <em>something</em> up and running. That applies from both a technical and personal perspective. You can always iterate and improve once you&#39;ve built basic momentum.<br />\n<br />\nSpeaking of which, this will be my first post that I&#39;m hoping to build my own momentum from. I&#39;m aware that I&#39;m probably an incredibly average writer, but that shouldn&#39;t be a reason to stop. The direction of this site is yet to be seen, but I&#39;m not planning on restricting myself. If there&#39;s something I want to do or write about. I will!</p>\n"
            }
      ]
}